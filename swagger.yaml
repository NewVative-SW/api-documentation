openapi: 3.0.3
info:
  title: NewVative - Backend API 1.0
  description: |-
    This is `New Wative` Backend Server based on the OpenAPI 3.0 specification.  You can find out more about by the company by clicking [here](https://www.newvative.com/).

  termsOfService: http://swagger.io/terms/
  contact:
    email: faaiz@newvative.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://backend.newvative.com
tags:

  - name: company
    description: Operations about Company
  - name: branch
    description: Operations about branches
  - name: user
    description: Operations about user
  - name: device
    description: Everything about your Devices    
  - name: sensordata
    description: Operations about sensordata

paths:
  /company:
     get:
      tags:
        - company
      summary: Get all companies registered
      description: Get a list of all companies registered.
      operationId: getAllCompanies
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'          
        '404':
          description: Invalid status value
        '401':
          description: Unauthorized Access
  /company/register:
    post:
      tags:
        - company
      summary: Register New Company
      description: This can only be done by the logged in user.
      operationId: registerCompany
      requestBody:
        description: Add New Comapny
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
  /company/{companyId}:
    get:
      tags:
        - company
      summary: Get Specific Company by Id
      description: Get Company Details
      operationId: getCompanyById
      parameters:
        - name: companyId
          in: path
          description: 'The Id of the company that needs to be fetched. '
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'          
        '400':
          description: Invalid Company Id Address supplied
        '404':
          description: Company not found
    put:
      tags:
        - company
      summary: Update Company Details
      description: This can only be done by the logged in user.
      operationId: updateCompany
      parameters:
        - name: companyId
          in: path
          description: Company Address that needs to be updated.
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent Company in the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
      responses:
        default:
          description: Company Updated successfully.
        '404':
          description : No Such Company Exists
    delete:
      tags:
        - company
      summary: Delete a company along with its branches from system
      description: This can only be done by the logged in user
      operationId: deleteComapny
      parameters:
        - name: companyId
          in: path
          description: The Company Id that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid Company Id supplied
        '404':
          description: Company not found
  /branches/all:
     get:
      tags:
        - branch
      summary: Get all Branches from a company
      description: Get a list of all branches registered.
      operationId: getAllBranches
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Branch'          
        '401':
          description: Unauthorized Access
  /branch/register:
    post:
      tags:
        - branch
      summary: Register New Branch
      description: This can only be done by the logged in user.
      operationId: registerBranch
      requestBody:
        description: Add New Branch
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Branch'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
  /branch/{branchId}:
    get:
      tags:
        - branch
      summary: Get Specific Branch by Id
      description: Get Branch Details
      operationId: getBranchById
      parameters:
        - name: branchId
          in: path
          description: 'The Id of the company that needs to be fetched. '
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'          
        '400':
          description: Invalid Branch Id Address supplied
        '404':
          description: Branch not found
    put:
      tags:
        - branch
      summary: Update Branch Details
      description: This can only be done by the logged in user.
      operationId: updateBranch
      parameters:
        - name: branchId
          in: path
          description: Branch Id that needs to be updated.
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent Branch in the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Branch'
      responses:
        default:
          description: Branch Updated successfully.
        '404':
          description : No Such Branch Exists
    delete:
      tags:
        - branch
      summary: Delete a Branch along with its Devices from system
      description: This can only be done by the logged in user
      operationId: deleteBranch
      parameters:
        - name: branchId
          in: path
          description: The Branch Id that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid Branch Id supplied
        '404':
          description: Branch not found          
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /device/authenticate:
   post:
      tags:
        - device
      summary: Authenticate Device
      description: Authenticate Devices by giving them access tokens.
      operationId: authenticateDevice
      requestBody:
        description: Authenticate Device
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
          application/xml:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authtoken'
  /devices/all/{branchId}:
    get:
      tags:
        - device
      summary: Get all devices installed on a specific branch
      description: Get a list of all devices installed on a branch.
      operationId: getallDevicesbyBranch
      parameters:
        - name: branchId
          in: path
          description: 'Branch Id For which the devices are to be fetched.'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
                   
        '404':
          description: Invalid status value
        '401':
          description: Unauthorized Access          
  /device/{deviceAdd}:
    get:
      tags:
        - device
      summary: Get Specific device by Address
      description: ''
      operationId: getDeviceByAdd
      parameters:
        - name: deviceAdd
          in: path
          description: 'The add that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'          
        '400':
          description: Invalid Device Address supplied
        '404':
          description: Device not found
    put:
      tags:
        - device
      summary: Update device
      description: This can only be done by the logged in user.
      operationId: updateDevice
      parameters:
        - name: deviceAdd
          in: path
          description: DeviceAddress that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent device in the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '200':
          description: Device Updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'    
        '404':
          description : No Such Device Exists
        '400':
          description : Un-Authorized Access
    delete:
      tags:
        - device
      summary: Delete a device from system
      description: This can only be done by the logged in user.
      operationId: deleteDevice
      parameters:
        - name: deviceAdd
          in: path
          description: The deviceAdd that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid deviceAdd supplied
        '404':
          description: Device not found
  /devices/all:
    get:
      tags:
        - device
      summary: Get all devices installed everywhere.
      description: This can only be done by an admin role of system.
      operationId: getallDevices
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'          
        '404':
          description: Invalid status value
        '401':
          description: Unauthorized Access
  /device/register:
   post:
      tags:
        - device
      summary: Register New Device
      description: This can only be done by the logged in user.
      operationId: registerDevice
      requestBody:
        description: Add New Device
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
          application/xml:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /sensordata/insert:
    post:
      tags:
        - sensordata
      summary: Insert Sensor Data Into DB
      description: This can only be done by the logged in user.
      operationId: senddatatoDb
      requestBody:
        description: Add New Data to system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensorData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SensorData'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorData'
  /sensordata/all/{branchId}:
    get:
      tags:
        - sensordata
      summary: Get All device  data from a specific branch uptill now.
      description: Get a list of all data values from a specific branch.
      operationId: getDevicesDataByBranch
      parameters:
        - name: branchId
          in: path
          description: 'Branch For which the data is to be fetched.'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SensorData'
        '404':
          description: Invalid DeviceAdd value
        '401':
          description: Unauthorized Access          
  /sensor/{branchId}/{date}:
    get:
      tags:
        - sensordata
      summary: Get Specific device by Address
      description: ''
      operationId: getBranchDevicesDatabyDate
      parameters:
        - name: branchId
          in: path
          description: 'Branch Id '
          required: true
          schema:
            type: string
        - name : date
          in: path
          description: 'Date for which data is to be fetched.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'          
        '400':
          description: Invalid Device Address supplied
        '404':
          description: Device not found
    delete:
      tags:
        - sensordata
      summary: Delete a device data from system for a specific branch.
      description: This can only be done by the logged in user.
      operationId: deleteDeviceDataByBranch
      parameters:
        - name: branchId
          in: path
          description: 'Branch Id '
          required: true
          schema:
            type: string
        - name : date
          in: path
          description: 'Date for which data is to be fetched.'
          required: true
          schema:
            type: string
      responses:
        '200':
           description: Data Deleted Successfully
        '400':
          description: Invalid deviceAdd supplied
        '404':
          description: Device not found

  
components:
  schemas:
    # Category:
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       format: int64
    #       example: 1
    #     name:
    #       type: string
    #       example: Dogs
    #   xml:
    #     name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    # Tag:
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       format: int64
    #     name:
    #       type: string
    #   xml:
    #     name: tag
    # Pet:
    #   required:
    #     - name
    #     - photoUrls
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       format: int64
    #       example: 10
    #     name:
    #       type: string
    #       example: doggie
    #     category:
    #       $ref: '#/components/schemas/Category'
    #     photoUrls:
    #       type: array
    #       xml:
    #         wrapped: true
    #       items:
    #         type: string
    #         xml:
    #           name: photoUrl
    #     tags:
    #       type: array
    #       xml:
    #         wrapped: true
    #       items:
    #         $ref: '#/components/schemas/Tag'
    #     status:
    #       type: string
    #       description: pet status in the store
    #       enum:
    #         - available
    #         - pending
    #         - sold
    #   xml:
    #     name: pet
    Device:
      required:
        - macAd
        - branchId
        - devicename
        - password
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        macAd:
          type: string
          example: 00-B0-D0-63-C2-26
        devicename:
          type: string
          example : "al-shifa-01"
        password:
          type: string
          example: AnyPassword
        # category:
        #   $ref: '#/components/schemas/Category'
        branchId:
          type: integer
          format: int64
          example: 5
        status:
          type: integer
          description: Device status in system i.e 1 = Active , 0 = Lost/Blocked ,2 = Suspended
          enum:
            - 1
            - 0
      xml:
        name: pet        
    Company:
      required:
        - name
      type: object
      properties:
        company_id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Al-Shifa
        # category:
        #   $ref: '#/components/schemas/Category'
        branch:
          type: array
          xml:
            wrapped: true
          items:
            # $ref: '#/components/schemas/Branch'
            type : integer
            format : int64
        # status:
        #   type: string
        #   description: pet status in the store
        #   enum:
        #     - available
        #     - pending
        #     - sold
    Branch:
      required:
        - name
        - company_id
      type: object
      properties:
        branch_id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Al-Shifa
        company_id:
          type: integer
          example: 1
          format: int64
        # category:
        #   $ref: '#/components/schemas/Category'
        devices:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Device'
    Authtoken:
      type: object
      properties:
        refresh_token:
          type: string
          example: 10asdas_kjhy^76t
        access_token:
          type: string
          example: 10asdas_kjhy^76t
    SensorData:
      type: object
      required:
        - timestamp
      properties:
        timestamp:
          type: string
          example : 1698405277329
        humidity_value:
          type: number
          format: int64
          example: 29.0
        temperature_value:
          type: number
          format: int64
          example: 22.0
        deviceAddress:
          type: string  
          example: 00FB6A
          
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  # requestBodies:
    # Pet:
    #   description: Pet object that needs to be added to the store
    #   content:
    #     application/json:
    #       schema:
    #         $ref: '#/components/schemas/Pet'
    #     application/xml:
    #       schema:
    #         $ref: '#/components/schemas/Pet'
    # UserArray:
    #   description: List of user object
    #   content:
    #     application/json:
    #       schema:
    #         type: array
    #         items:
    #           $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
